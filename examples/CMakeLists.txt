# Example programs

# Add the binary tree directory to the search path for linking and include files
link_directories (${PROJECT_BINARY_DIR}/bin)
include_directories (${CMAKE_CURRENT_BINARY_DIR} ${PROJECT_BINARY_DIR}/include )
  
file(COPY "amcl_build.c" DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
add_executable (amcl_build amcl_build.c)
target_link_libraries (amcl_build amcl_core) 

function(CURVE_EXAMPLE_SET tb tf tc nb base nbt m8 mt ct pf)

    file(READ "testecdh_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testecdh_${tc}.c" "${tempc}")
    add_executable (testecdh_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testecdh_${tc}.c)
    target_link_libraries (testecdh_${tc} amcl_curve_${tc})

  if((BUILD_MPIN) AND NOT(${pf} STREQUAL "NOT"))
    file(READ "testmpin_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testmpin_${tc}.c" "${tempc}")
    add_executable (testmpin_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testmpin_${tc}.c)
    target_link_libraries (testmpin_${tc} amcl_mpin_${tc})

    file(READ "testdvs_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testdvs_${tc}.c" "${tempc}")
    add_executable (testdvs_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testdvs_${tc}.c)
    target_link_libraries (testdvs_${tc} amcl_mpin_${tc})

  endif((BUILD_MPIN) AND NOT(${pf} STREQUAL "NOT"))

  if((BUILD_WCC) AND NOT(${pf} STREQUAL "NOT"))
    file(READ "testwcc_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testwcc_${tc}.c" "${tempc}")
    add_executable (testwcc_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testwcc_${tc}.c)
    target_link_libraries (testwcc_${tc} amcl_wcc_${tc})

    file(READ "testwcc_tp_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testwcc_tp_${tc}.c" "${tempc}")
    add_executable (testwcc_tp_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testwcc_${tc}.c)
    target_link_libraries (testwcc_tp_${tc} amcl_wcc_${tc})

    file(READ "testwcc_dta_ZZZ.c" tempc)
    string(REGEX REPLACE "ZZZ" ${tc} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testwcc_dta_${tc}.c" "${tempc}")
    add_executable (testwcc_dta_${tc} ${CMAKE_CURRENT_BINARY_DIR}/testwcc_${tc}.c)
    target_link_libraries (testwcc_dta_${tc} amcl_wcc_${tc})
  endif((BUILD_WCC) AND NOT(${pf} STREQUAL "NOT"))

endfunction(CURVE_EXAMPLE_SET tb tf tc nb base nbt m8 mt ct pf)

function(RSA_EXAMPLE_SET tb tff nb base ml)
    file(READ "testrsa_WWW.c" tempc)
    string(REGEX REPLACE "WWW" ${tff} tempc "${tempc}")
    file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/testrsa_${tff}.c" "${tempc}")
    add_executable (testrsa_${tff} ${CMAKE_CURRENT_BINARY_DIR}/testrsa_${tff}.c)
    target_link_libraries (testrsa_${tff} amcl_rsa_${tff})
endfunction(RSA_EXAMPLE_SET tb tff nb base ml)

# if(BUILD_X509)
#   file(COPY "testx509.c" DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
#   add_executable (testx509 ${CMAKE_CURRENT_BINARY_DIR}/testx509.c)
#   target_link_libraries (testx509 amcl_x509)
# endif(BUILD_X509)

string(REGEX REPLACE "," ";" AMCL_CURVE ${AMCL_CURVE})
string(REGEX REPLACE "," ";" AMCL_RSA ${AMCL_RSA})

foreach(CURVE ${AMCL_CURVE})
  if(AMCL_CHUNK STREQUAL "64")
    if(CURVE STREQUAL "ED25519")
        CURVE_EXAMPLE_SET("256" "25519" "ED25519" "32" "56" "255" "5" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "C25519")
        CURVE_EXAMPLE_SET("256" "25519" "C25519" "32" "56" "255" "5" "PSEUDO_MERSENNE" "MONTGOMERY" "NOT")
    elseif(CURVE STREQUAL "NIST256")
        CURVE_EXAMPLE_SET("256" "NIST256" "NIST256" "32" "56" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "BRAINPOOL")
        CURVE_EXAMPLE_SET("256" "BRAINPOOL" "BRAINPOOL" "32" "56" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "ANSSI")
        CURVE_EXAMPLE_SET("256" "ANSSI" "ANSSI" "32" "56" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "HIFIVE")
        CURVE_EXAMPLE_SET("336" "HIFIVE" "HIFIVE" "42" "60" "336" "5" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "GOLDILOCKS")
        CURVE_EXAMPLE_SET("448" "GOLDILOCKS" "GOLDILOCKS" "56" "58" "448" "7" "GENERALISED_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NIST384")
        CURVE_EXAMPLE_SET("384" "NIST384" "NIST384" "48" "56" "384" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "C41417")
        CURVE_EXAMPLE_SET("416" "C41417" "C41417" "52" "60" "414" "7" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NIST521")
        CURVE_EXAMPLE_SET("528" "NIST521" "NIST521" "66" "60" "521" "7" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS256W")
        CURVE_EXAMPLE_SET("256" "256PMW" "NUMS256W" "32" "56" "256" "3" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS256E")
        CURVE_EXAMPLE_SET("256" "256PME" "NUMS256E" "32" "56" "256" "3" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NUMS384W")
        CURVE_EXAMPLE_SET("384" "384PM" "NUMS384W" "48" "56" "384" "3" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS384E")
        CURVE_EXAMPLE_SET("384" "384PM" "NUMS384E" "48" "56" "384" "3" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NUMS512W")
        CURVE_EXAMPLE_SET("512" "512PM" "NUMS512W" "64" "56" "512" "7" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS512E")
        CURVE_EXAMPLE_SET("512" "512PM" "NUMS512E" "64" "56" "512" "7" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "BN254")
        CURVE_EXAMPLE_SET("256" "BN254" "BN254" "32" "56" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    elseif(CURVE STREQUAL "BN254CX")
        CURVE_EXAMPLE_SET("256" "BN254CX" "BN254CX" "32" "56" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    elseif(CURVE STREQUAL "BLS383")
        CURVE_EXAMPLE_SET("384" "BLS383" "BLS383" "48" "56" "383" "3" "NOT_SPECIAL" "WEIERSTRASS" "BLS")
    else()
      message(FATAL_ERROR "Invalid curve input")
    endif(CURVE STREQUAL "ED25519")
  elseif(AMCL_CHUNK STREQUAL "32")
    if(CURVE STREQUAL "ED25519")
        CURVE_EXAMPLE_SET("256" "25519" "ED25519" "32" "29" "255" "5" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "C25519")
        CURVE_EXAMPLE_SET("256" "25519" "C25519" "32" "29" "255" "5" "PSEUDO_MERSENNE" "MONTGOMERY" "NOT")
    elseif(CURVE STREQUAL "NIST256")
        CURVE_EXAMPLE_SET("256" "NIST256" "NIST256" "32" "28" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "BRAINPOOL")
        CURVE_EXAMPLE_SET("256" "BRAINPOOL" "BRAINPOOL" "32" "28" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "ANSSI")
        CURVE_EXAMPLE_SET("256" "ANSSI" "ANSSI" "32" "28" "256" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "HIFIVE")
        CURVE_EXAMPLE_SET("336" "HIFIVE" "HIFIVE" "42" "29" "336" "5" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "GOLDILOCKS")
        CURVE_EXAMPLE_SET("448" "GOLDILOCKS" "GOLDILOCKS" "56" "29" "448" "7" "GENERALISED_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NIST384")
        CURVE_EXAMPLE_SET("384" "NIST384" "NIST384" "48" "29" "384" "7" "NOT_SPECIAL" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "C41417")
        CURVE_EXAMPLE_SET("416" "C41417" "C41417" "52" "29" "414" "7" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NIST521")
        CURVE_EXAMPLE_SET("528" "NIST521" "NIST521" "66" "28" "521" "7" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS256W")
        CURVE_EXAMPLE_SET("256" "256PMW" "NUMS256W" "32" "28" "256" "3" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS256E")
        CURVE_EXAMPLE_SET("256" "256PME" "NUMS256E" "32" "29" "256" "3" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NUMS384W")
        CURVE_EXAMPLE_SET("384" "384PM" "NUMS384W" "48" "29" "384" "3" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS384E")
        CURVE_EXAMPLE_SET("384" "384PM" "NUMS384E" "48" "29" "384" "3" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "NUMS512W")
        CURVE_EXAMPLE_SET("512" "512PM" "NUMS512W" "64" "29" "512" "7" "PSEUDO_MERSENNE" "WEIERSTRASS" "NOT")
    elseif(CURVE STREQUAL "NUMS512E")
        CURVE_EXAMPLE_SET("512" "512PM" "NUMS512E" "64" "29" "512" "7" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "BN254")
        CURVE_EXAMPLE_SET("256" "BN254" "BN254" "32" "28" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    elseif(CURVE STREQUAL "BN254CX")
        CURVE_EXAMPLE_SET("256" "BN254CX" "BN254CX" "32" "28" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    elseif(CURVE STREQUAL "BLS383")
        CURVE_EXAMPLE_SET("384" "BLS383" "BLS383" "48" "29" "383" "3" "NOT_SPECIAL" "WEIERSTRASS" "BLS")
    else()
      message(FATAL_ERROR "Invalid curve input")
    endif(CURVE STREQUAL "ED25519")
  elseif(AMCL_CHUNK STREQUAL "16")
    if(CURVE STREQUAL "ED25519")
        CURVE_EXAMPLE_SET("256" "25519" "ED25519" "32" "13" "255" "5" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "C25519")
        CURVE_EXAMPLE_SET("256" "25519" "C25519" "32" "13" "255" "5" "PSEUDO_MERSENNE" "MONTGOMERY" "NOT")
    elseif(CURVE STREQUAL "NUMS256E")
        CURVE_EXAMPLE_SET("256" "256PME" "NUMS256E" "32" "13" "256" "3" "PSEUDO_MERSENNE" "EDWARDS" "NOT")
    elseif(CURVE STREQUAL "BN254")
        CURVE_EXAMPLE_SET("256" "BN254" "BN254" "32" "13" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    elseif(CURVE STREQUAL "BN254CX")
        CURVE_EXAMPLE_SET("256" "BN254CX" "BN254CX" "32" "13" "254" "3" "NOT_SPECIAL" "WEIERSTRASS" "BN")
    else()
      message(FATAL_ERROR "Invalid curve input")
    endif(CURVE STREQUAL "ED25519")
  endif(AMCL_CHUNK STREQUAL "64")
endforeach(CURVE)

foreach(RSA ${AMCL_RSA})
  if(AMCL_CHUNK STREQUAL "64")
    if(RSA STREQUAL "2048")
      RSA_EXAMPLE_SET("1024" "2048" "128" "58" "2")
    elseif(RSA STREQUAL "3072")
      RSA_EXAMPLE_SET("384" "3072" "48" "56" "8")
    elseif(RSA STREQUAL "4096")
      RSA_EXAMPLE_SET("512" "4096" "64" "60" "8")
    else()
      message(FATAL_ERROR "Invalid RSA input")
    endif(RSA STREQUAL "2048")
  elseif(AMCL_CHUNK STREQUAL "32")
    if(RSA STREQUAL "2048")
      RSA_EXAMPLE_SET("1024" "2048" "128" "28" "2")
    elseif(RSA STREQUAL "3072")
      RSA_EXAMPLE_SET("384" "3072" "48" "28" "8")
    elseif(RSA STREQUAL "4096")
      RSA_EXAMPLE_SET("512" "4096" "64" "29" "8")
    else()
        message(FATAL_ERROR "Invalid RSA input")
    endif(RSA STREQUAL "2048")
  elseif(AMCL_CHUNK STREQUAL "16")
    if(RSA STREQUAL "2048")
      RSA_EXAMPLE_SET("256" "2048" "32" "13" "8")
    else()
      message(FATAL_ERROR "Invalid RSA input")
    endif(RSA STREQUAL "2048")
  else()
    message(FATAL_ERROR "Invalid CHUNK size")
  endif(AMCL_CHUNK STREQUAL "64")
endforeach(RSA)

# install(DIRECTORY DESTINATION ${CMAKE_INSTALL_PREFIX} DIRECTORY_PERMISSIONS
#         OWNER_WRITE OWNER_READ OWNER_EXECUTE
#         GROUP_READ GROUP_EXECUTE
#         WORLD_READ WORLD_EXECUTE)

# install(DIRECTORY DESTINATION bin DIRECTORY_PERMISSIONS
#         OWNER_WRITE OWNER_READ OWNER_EXECUTE
#         GROUP_READ GROUP_EXECUTE
#         WORLD_READ WORLD_EXECUTE)

# install(TARGETS amcl_build DESTINATION bin PERMISSIONS
#         OWNER_WRITE OWNER_READ OWNER_EXECUTE
#         GROUP_READ GROUP_EXECUTE
#         WORLD_READ WORLD_EXECUTE)